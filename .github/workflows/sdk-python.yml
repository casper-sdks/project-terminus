name: Terminus Python
on:
  workflow_call:
    inputs:
      python-branch:
        description: 'Python branch'
        required: false
        type: string
      node-version:
        description: 'Node build repo'
        required: true
        type: string

jobs:
  build:
    name: Terminus Python
    runs-on: ubuntu-latest

    steps:
      - uses: tyriis/docker-image-tag-exists@v2.0.0
        id: cctl-docker-image-exists
        with:
          registry: docker.io
          repository: stormeye2000/cspr-cctl
          tag: '${{ github.event.inputs.node-version }}'

      - name: Checkout the dockerfile
        uses: actions/checkout@v4.1.1

      - name: CCTL Docker Image Exists
        if: ${{ steps.cctl-docker-image-exists.outputs.tag == 'found' }}
        run: |
          echo "Using docker.io image...${{ github.event.inputs.node-version }}"         
          docker run --rm -it --name cspr-cctl -d -p 25101:25101 -p 11101:11101 -p 14101:14101 -p 18101:18101 stormeye2000/cspr-cctl:${{ github.event.inputs.node-version }}

      - name: CCTL Docker Image Doesn't Exist
        if: ${{ steps.cctl-docker-image-exists.outputs.tag != 'found' }}
        run: |
          echo "Building docker image...${{ github.event.inputs.node-version }}"
          docker build --build-arg="GITBRANCH=${{ github.event.inputs.node-version }}" -t stormeye2000/cspr-cctl .
          docker run --rm -it --name cspr-cctl -d -p 25101:25101 -p 11101:11101 -p 14101:14101 -p 18101:18101 stormeye2000/cspr-cctl  

      - name: Wait for CCTL
        run: |
          echo "Wait for CCTL"
          sleep 30s


      # Checkout the test platform Python code
      - name: Checkout the test platform Python code
        uses: actions/checkout@v4.1.1
        with:
          repository: casper-sdks/terminus-python-tests
          path: terminus-python-tests
          ref: main

      # Set up Python
      - name: Set Up Python 3.9
        uses: actions/setup-python@v5
        with:
          python-version: 3.9

      # Build environment
      - name: Build test environment
        run: |
          cd terminus-python-tests/script 
          chmod +x docker-copy-assets && ./docker-copy-assets && cd ..          

          awk '{sub(/@dev/,"@${{ github.event.inputs.python-branch }}")}1' requirements.txt > temp.txt && mv temp.txt requirements.txt 
          
          pip install -r requirements.txt
          pip install behave

      # Run the actual cucumber tests
      - name: Test with cucumber
        run: |
          cd terminus-python-tests
          behave test/features --junit

      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v4
        if: success() || failure() # always run even if the previous step fails
        with:
          check_name: Python
          report_paths: 'terminus-python-tests/reports/*.xml'
          detailed_summary: true
          include_passed: true

      - name: Upload Junit Test Output
        uses: actions/upload-artifact@v4
        if: success() || failure()
        with:
          name: python-junit-test-report
          path: terminus-python-tests/reports/*.xml